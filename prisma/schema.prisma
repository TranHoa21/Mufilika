generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String?
  role         Role           @default(CUSTOMER)
  createdAt    DateTime       @default(now())
  posts        Post[]
  comments     Comment[]
  notification Notification[]
  orders Order[] 
}

enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String?
  price         Float
  originalPrice Float? // Gi√° g·ªëc
  sale          Boolean // ƒêang gi·∫£m gi√° hay kh√¥ng
  rating        Float? // ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh
  slug          String         @unique // ƒê∆∞·ªùng d·∫´n th√¢n thi·ªán
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageUrl      String? // ·∫¢nh ch√≠nh
  images        ProductImage[] // Li√™n k·∫øt ƒë·∫øn nhi·ªÅu ·∫£nh
  orderItems    OrderItem[]    @relation("ProductOrderItems")
  reviews       Review[] // Li√™n k·∫øt ƒë·∫øn b·∫£ng Review
  cartItems   CartItem[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Review {
  id         String   @id @default(uuid())
  content    String // N·ªôi dung ƒë√°nh gi√°
  rating     Int // ƒêi·ªÉm ƒë√°nh gi√° (1-5)
  authorName String // T√™n ng∆∞·ªùi ƒë√°nh gi√°
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}

model Order {
  id             Int            @id @default(autoincrement())
  totalPrice     Float
  status         OrderStatus    @default(PENDING)
  createdAt      DateTime       @default(now())
  name           String
  phone          String
  email          String
  address        String
  paymentMethod  String
  transactionNo  String?
  paymentTime    DateTime?
  notifications  Notification[]
  orderItems     OrderItem[]  // M·ªëi quan h·ªá 1-n v·ªõi OrderItem

  // üëá Th√™m m·ªëi quan h·ªá v·ªõi User
  userId         String?       // n·∫øu kh√¥ng b·∫Øt bu·ªôc user ph·∫£i ƒëƒÉng nh·∫≠p
  user           User?         @relation(fields: [userId], references: [id])
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        Int
  product        Product @relation("ProductOrderItems", fields: [productId], references: [id])
  productId      String
  quantity       Int     @default(1)
  productName    String?
  designType     String
  drawStyle      String?
  font           String?
  customText     String?
  imageUrl       String
  selectedOption String?
}

enum OrderStatus {
  PENDING
  PAID
  CONFIRMED
  SHIPPED
  COMPLETED
  CANCELLED
}

model Cart {
  id        String      @id @default(uuid())
  userId    String?     // Cho ph√©p guest (kh√¥ng c·∫ßn login)
  items     CartItem[]
  createdAt DateTime    @default(now())
}

model CartItem {
  id             String   @id @default(uuid())
  cart           Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId         String

  product        Product  @relation(fields: [productId], references: [id])
  productId      String

  quantity       Int
  drawStyle      String?   // optional fields cho custom s·∫£n ph·∫©m
  font           String?
  customText     String?
  selectedOption String?

  createdAt      DateTime  @default(now())
}


model Post {
  id              String  @id @default(uuid())
  title           String
  slug            String  @unique
  excerpt         String? // T√≥m t·∫Øt b√†i vi·∫øt
  content         String
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  keywords        String?
  canonicalUrl    String?
  published       Boolean @default(false)
  status          String  @default("draft") // draft, published, archived
  featured        Boolean @default(false) // B√†i vi·∫øt n·ªïi b·∫≠t
  likes           Int     @default(0) // L∆∞·ª£t th√≠ch
  views           Int     @default(0)
  readingTime     Int?
  postType        String  @default("article") // article, tutorial, news

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  authorId   String?
  author     User?     @relation(fields: [authorId], references: [id])

  images   PostImage[] // Quan h·ªá v·ªõi b·∫£ng PostImage
  comments Comment[] // Quan h·ªá v·ªõi b·∫£ng Comment
  viewsLog PostView[] // Quan h·ªá v·ªõi b·∫£ng PostView

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostImage {
  id        Int      @id @default(autoincrement()) // ID duy nh·∫•t, t·ª± ƒë·ªông tƒÉng
  imageUrl  String // URL c·ªßa h√¨nh ·∫£nh
  altText   String? // M√¥ t·∫£ cho h√¨nh ·∫£nh (alt text), c√≥ th·ªÉ NULL
  createdAt DateTime @default(now()) // Th·ªùi gian t·∫°o
  updatedAt DateTime @updatedAt // Th·ªùi gian c·∫≠p nh·∫≠t

  // N·∫øu b·∫°n mu·ªën li√™n k·∫øt v·ªõi b·∫£ng `Post` (v√≠ d·ª• b√†i vi·∫øt)
  postId String? // ID b√†i vi·∫øt li√™n k·∫øt (c√≥ th·ªÉ NULL n·∫øu kh√¥ng c√≥)
  post   Post?   @relation(fields: [postId], references: [id]) // Quan h·ªá v·ªõi b·∫£ng Post
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  content   String
  status    String   @default("pending") // pending, approved, spam
  createdAt DateTime @default(now())
}

model PostView {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  ip        String
  userAgent String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
}
