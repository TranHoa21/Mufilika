generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())

  bookings      Booking[] // C√°c ƒë∆°n ƒë·∫∑t tour c·ªßa ng∆∞·ªùi d√πng
  messages      ContactMessage[] @relation("UserMessages") // Tin nh·∫Øn li√™n h·ªá
  posts         Post[]           @relation("AuthorPosts")
  comments      Comment[]
  notifications Notification[]
}

enum Role {
  ADMIN
  CUSTOMER
}

model Tours {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  slug         String        @unique @db.VarChar(255)
  address      String        @db.VarChar(255)
  description  String
  duration     Int
  maxGuests    Int
  price        Float
  image        String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime      @default(now()) @db.Timestamp(6)

  bookingItems BookingItem[]
  tourDetails  Tourdatas[]   @relation("TourToTourdatas")
  testimonials Testimonial[]
}


model Tourdatas {
  id                 Int      @id @default(autoincrement())
  tourId             Int?
  tour               Tours?   @relation("TourToTourdatas", fields: [tourId], references: [id])
  name_day           String?
  image_hotel        String?  @db.VarChar(255)
  image_in_day       String?  @db.VarChar(255)
  name_day_title     String?
  name_hotel         String?
  schedule           String?
  hotel_introduction String?
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @default(now()) @db.Timestamp(6)
}

model Testimonial {
  id       String @id @default(uuid())
  rating   Int // 1‚Äì5
  comment  String
  customer String
  tourId   Int
  tour     Tours  @relation(fields: [tourId], references: [id])
}

model Booking {
  id            String        @id @default(uuid())
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  name          String
  email         String
  phone         String
  paymentMethod String
  transactionNo String?
  paymentTime   DateTime?

  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  bookingItems  BookingItem[]
  notifications Notification[] // Notification li√™n quan
}

enum BookingStatus {
  PENDING
  PAID
  CONFIRMED
  COMPLETED
  CANCELLED
}

model BookingItem {
  id        String  @id @default(uuid())
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])

  tourId Int
  tour   Tours @relation(fields: [tourId], references: [id])

  quantity Int   @default(1)
  price    Float
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())

  userId String?
  user   User?   @relation("UserMessages", fields: [userId], references: [id])
}

model Post {
  id              String  @id @default(uuid())
  title           String
  slug            String  @unique
  excerpt         String?
  content         String
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  keywords        String?
  canonicalUrl    String?
  published       Boolean @default(false)
  status          String  @default("draft")
  featured        Boolean @default(false)
  likes           Int     @default(0)
  views           Int     @default(0)
  readingTime     Int?
  postType        String  @default("article")

  // üëá Quan h·ªá v·ªõi User (author)
  authorId String?
  author   User?   @relation("AuthorPosts", fields: [authorId], references: [id])

  // üëá Quan h·ªá v·ªõi Category
  categoryId String?
  category   Category? @relation("CategoryPosts", fields: [categoryId], references: [id])

  // üëá Quan h·ªá kh√°c
  tags     Tag[]       @relation("PostTags")
  images   PostImage[]
  comments Comment[]
  viewsLog PostView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("CategoryPosts") // ‚¨ÖÔ∏è th√™m t√™n quan h·ªá ƒë·ªëi ·ª©ng
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  // S·ª≠a t·∫°i ƒë√¢y
  posts Post[] @relation("PostTags")
}

model Comment {
  id     String @id @default(uuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  content   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model PostView {
  id     String @id @default(uuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  ip        String
  userAgent String
  createdAt DateTime @default(now())
}

model PostImage {
  id        Int      @id @default(autoincrement()) // ID duy nh·∫•t, t·ª± ƒë·ªông tƒÉng
  imageUrl  String // URL c·ªßa h√¨nh ·∫£nh
  altText   String? // M√¥ t·∫£ cho h√¨nh ·∫£nh (alt text), c√≥ th·ªÉ NULL
  createdAt DateTime @default(now()) // Th·ªùi gian t·∫°o
  updatedAt DateTime @updatedAt // Th·ªùi gian c·∫≠p nh·∫≠t

  // N·∫øu b·∫°n mu·ªën li√™n k·∫øt v·ªõi b·∫£ng `Post` (v√≠ d·ª• b√†i vi·∫øt)
  postId String? // ID b√†i vi·∫øt li√™n k·∫øt (c√≥ th·ªÉ NULL n·∫øu kh√¥ng c√≥)
  post   Post?   @relation(fields: [postId], references: [id]) // Quan h·ªá v·ªõi b·∫£ng Post
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])
}
